#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dashboardDB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertDomain(Domain instance);
  partial void UpdateDomain(Domain instance);
  partial void DeleteDomain(Domain instance);
  partial void InsertProject(Project instance);
  partial void UpdateProject(Project instance);
  partial void DeleteProject(Project instance);
  partial void InsertFish(Fish instance);
  partial void UpdateFish(Fish instance);
  partial void DeleteFish(Fish instance);
  partial void InsertFish_Datapoint(Fish_Datapoint instance);
  partial void UpdateFish_Datapoint(Fish_Datapoint instance);
  partial void DeleteFish_Datapoint(Fish_Datapoint instance);
  partial void Insertfishimage(fishimage instance);
  partial void Updatefishimage(fishimage instance);
  partial void Deletefishimage(fishimage instance);
  partial void InsertFishtank_Station(Fishtank_Station instance);
  partial void UpdateFishtank_Station(Fishtank_Station instance);
  partial void DeleteFishtank_Station(Fishtank_Station instance);
  partial void InsertfoodWaste(foodWaste instance);
  partial void UpdatefoodWaste(foodWaste instance);
  partial void DeletefoodWaste(foodWaste instance);
  partial void InsertPlant(Plant instance);
  partial void UpdatePlant(Plant instance);
  partial void DeletePlant(Plant instance);
  partial void InsertPlants_Harvested(Plants_Harvested instance);
  partial void UpdatePlants_Harvested(Plants_Harvested instance);
  partial void DeletePlants_Harvested(Plants_Harvested instance);
  partial void InsertCompost(Compost instance);
  partial void UpdateCompost(Compost instance);
  partial void DeleteCompost(Compost instance);
  partial void InsertBiodiesel(Biodiesel instance);
  partial void UpdateBiodiesel(Biodiesel instance);
  partial void DeleteBiodiesel(Biodiesel instance);
  partial void InsertVermiculture(Vermiculture instance);
  partial void UpdateVermiculture(Vermiculture instance);
  partial void DeleteVermiculture(Vermiculture instance);
  partial void InsertEnergyProduction(EnergyProduction instance);
  partial void UpdateEnergyProduction(EnergyProduction instance);
  partial void DeleteEnergyProduction(EnergyProduction instance);
  partial void InsertEnergyConsumed(EnergyConsumed instance);
  partial void UpdateEnergyConsumed(EnergyConsumed instance);
  partial void DeleteEnergyConsumed(EnergyConsumed instance);
  partial void InsertAquaFish(AquaFish instance);
  partial void UpdateAquaFish(AquaFish instance);
  partial void DeleteAquaFish(AquaFish instance);
  partial void InsertAquaFarming(AquaFarming instance);
  partial void UpdateAquaFarming(AquaFarming instance);
  partial void DeleteAquaFarming(AquaFarming instance);
  partial void InsertFishtank_DataPoint(Fishtank_DataPoint instance);
  partial void UpdateFishtank_DataPoint(Fishtank_DataPoint instance);
  partial void DeleteFishtank_DataPoint(Fishtank_DataPoint instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["cdjamConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Domain> Domains
	{
		get
		{
			return this.GetTable<Domain>();
		}
	}
	
	public System.Data.Linq.Table<Project> Projects
	{
		get
		{
			return this.GetTable<Project>();
		}
	}
	
	public System.Data.Linq.Table<Fish> Fishes
	{
		get
		{
			return this.GetTable<Fish>();
		}
	}
	
	public System.Data.Linq.Table<Fish_Datapoint> Fish_Datapoints
	{
		get
		{
			return this.GetTable<Fish_Datapoint>();
		}
	}
	
	public System.Data.Linq.Table<fishimage> fishimages
	{
		get
		{
			return this.GetTable<fishimage>();
		}
	}
	
	public System.Data.Linq.Table<Fishtank_Station> Fishtank_Stations
	{
		get
		{
			return this.GetTable<Fishtank_Station>();
		}
	}
	
	public System.Data.Linq.Table<foodWaste> foodWastes
	{
		get
		{
			return this.GetTable<foodWaste>();
		}
	}
	
	public System.Data.Linq.Table<Plant> Plants
	{
		get
		{
			return this.GetTable<Plant>();
		}
	}
	
	public System.Data.Linq.Table<Plants_Harvested> Plants_Harvesteds
	{
		get
		{
			return this.GetTable<Plants_Harvested>();
		}
	}
	
	public System.Data.Linq.Table<Compost> Composts
	{
		get
		{
			return this.GetTable<Compost>();
		}
	}
	
	public System.Data.Linq.Table<Biodiesel> Biodiesels
	{
		get
		{
			return this.GetTable<Biodiesel>();
		}
	}
	
	public System.Data.Linq.Table<Vermiculture> Vermicultures
	{
		get
		{
			return this.GetTable<Vermiculture>();
		}
	}
	
	public System.Data.Linq.Table<EnergyProduction> EnergyProductions
	{
		get
		{
			return this.GetTable<EnergyProduction>();
		}
	}
	
	public System.Data.Linq.Table<EnergyConsumed> EnergyConsumeds
	{
		get
		{
			return this.GetTable<EnergyConsumed>();
		}
	}
	
	public System.Data.Linq.Table<AquaFish> AquaFishes
	{
		get
		{
			return this.GetTable<AquaFish>();
		}
	}
	
	public System.Data.Linq.Table<AquaFarming> AquaFarmings
	{
		get
		{
			return this.GetTable<AquaFarming>();
		}
	}
	
	public System.Data.Linq.Table<Fishtank_DataPoint> Fishtank_DataPoints
	{
		get
		{
			return this.GetTable<Fishtank_DataPoint>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Domain")]
public partial class Domain : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DomainID;
	
	private string _Domain_Name;
	
	private string _Domain_Description;
	
	private EntitySet<Project> _Projects;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDomainIDChanging(int value);
    partial void OnDomainIDChanged();
    partial void OnDomain_NameChanging(string value);
    partial void OnDomain_NameChanged();
    partial void OnDomain_DescriptionChanging(string value);
    partial void OnDomain_DescriptionChanged();
    #endregion
	
	public Domain()
	{
		this._Projects = new EntitySet<Project>(new Action<Project>(this.attach_Projects), new Action<Project>(this.detach_Projects));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DomainID
	{
		get
		{
			return this._DomainID;
		}
		set
		{
			if ((this._DomainID != value))
			{
				this.OnDomainIDChanging(value);
				this.SendPropertyChanging();
				this._DomainID = value;
				this.SendPropertyChanged("DomainID");
				this.OnDomainIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain_Name", DbType="VarChar(50)")]
	public string Domain_Name
	{
		get
		{
			return this._Domain_Name;
		}
		set
		{
			if ((this._Domain_Name != value))
			{
				this.OnDomain_NameChanging(value);
				this.SendPropertyChanging();
				this._Domain_Name = value;
				this.SendPropertyChanged("Domain_Name");
				this.OnDomain_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Domain_Description", DbType="VarChar(MAX)")]
	public string Domain_Description
	{
		get
		{
			return this._Domain_Description;
		}
		set
		{
			if ((this._Domain_Description != value))
			{
				this.OnDomain_DescriptionChanging(value);
				this.SendPropertyChanging();
				this._Domain_Description = value;
				this.SendPropertyChanged("Domain_Description");
				this.OnDomain_DescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Project", Storage="_Projects", ThisKey="DomainID", OtherKey="DomainID")]
	public EntitySet<Project> Projects
	{
		get
		{
			return this._Projects;
		}
		set
		{
			this._Projects.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Domain = this;
	}
	
	private void detach_Projects(Project entity)
	{
		this.SendPropertyChanging();
		entity.Domain = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ProjectID;
	
	private int _DomainID;
	
	private string _Project_Name;
	
	private string _Project_description;
	
	private string _Principal_Investigator;
	
	private System.Nullable<System.DateTime> _DATE_Created;
	
	private System.Nullable<int> _number_of_users;
	
	private EntitySet<Fishtank_Station> _Fishtank_Stations;
	
	private EntityRef<Domain> _Domain;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnDomainIDChanging(int value);
    partial void OnDomainIDChanged();
    partial void OnProject_NameChanging(string value);
    partial void OnProject_NameChanged();
    partial void OnProject_descriptionChanging(string value);
    partial void OnProject_descriptionChanged();
    partial void OnPrincipal_InvestigatorChanging(string value);
    partial void OnPrincipal_InvestigatorChanged();
    partial void OnDATE_CreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDATE_CreatedChanged();
    partial void Onnumber_of_usersChanging(System.Nullable<int> value);
    partial void Onnumber_of_usersChanged();
    #endregion
	
	public Project()
	{
		this._Fishtank_Stations = new EntitySet<Fishtank_Station>(new Action<Fishtank_Station>(this.attach_Fishtank_Stations), new Action<Fishtank_Station>(this.detach_Fishtank_Stations));
		this._Domain = default(EntityRef<Domain>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ProjectID
	{
		get
		{
			return this._ProjectID;
		}
		set
		{
			if ((this._ProjectID != value))
			{
				this.OnProjectIDChanging(value);
				this.SendPropertyChanging();
				this._ProjectID = value;
				this.SendPropertyChanged("ProjectID");
				this.OnProjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DomainID", DbType="Int NOT NULL")]
	public int DomainID
	{
		get
		{
			return this._DomainID;
		}
		set
		{
			if ((this._DomainID != value))
			{
				if (this._Domain.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDomainIDChanging(value);
				this.SendPropertyChanging();
				this._DomainID = value;
				this.SendPropertyChanged("DomainID");
				this.OnDomainIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_Name", DbType="VarChar(50)")]
	public string Project_Name
	{
		get
		{
			return this._Project_Name;
		}
		set
		{
			if ((this._Project_Name != value))
			{
				this.OnProject_NameChanging(value);
				this.SendPropertyChanging();
				this._Project_Name = value;
				this.SendPropertyChanged("Project_Name");
				this.OnProject_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project_description", DbType="VarChar(MAX)")]
	public string Project_description
	{
		get
		{
			return this._Project_description;
		}
		set
		{
			if ((this._Project_description != value))
			{
				this.OnProject_descriptionChanging(value);
				this.SendPropertyChanging();
				this._Project_description = value;
				this.SendPropertyChanged("Project_description");
				this.OnProject_descriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Principal_Investigator", DbType="VarChar(50)")]
	public string Principal_Investigator
	{
		get
		{
			return this._Principal_Investigator;
		}
		set
		{
			if ((this._Principal_Investigator != value))
			{
				this.OnPrincipal_InvestigatorChanging(value);
				this.SendPropertyChanging();
				this._Principal_Investigator = value;
				this.SendPropertyChanged("Principal_Investigator");
				this.OnPrincipal_InvestigatorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DATE_Created", DbType="Date")]
	public System.Nullable<System.DateTime> DATE_Created
	{
		get
		{
			return this._DATE_Created;
		}
		set
		{
			if ((this._DATE_Created != value))
			{
				this.OnDATE_CreatedChanging(value);
				this.SendPropertyChanging();
				this._DATE_Created = value;
				this.SendPropertyChanged("DATE_Created");
				this.OnDATE_CreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number_of_users", DbType="Int")]
	public System.Nullable<int> number_of_users
	{
		get
		{
			return this._number_of_users;
		}
		set
		{
			if ((this._number_of_users != value))
			{
				this.Onnumber_of_usersChanging(value);
				this.SendPropertyChanging();
				this._number_of_users = value;
				this.SendPropertyChanged("number_of_users");
				this.Onnumber_of_usersChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Fishtank_Station", Storage="_Fishtank_Stations", ThisKey="ProjectID", OtherKey="ProjectID")]
	public EntitySet<Fishtank_Station> Fishtank_Stations
	{
		get
		{
			return this._Fishtank_Stations;
		}
		set
		{
			this._Fishtank_Stations.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Domain_Project", Storage="_Domain", ThisKey="DomainID", OtherKey="DomainID", IsForeignKey=true)]
	public Domain Domain
	{
		get
		{
			return this._Domain.Entity;
		}
		set
		{
			Domain previousValue = this._Domain.Entity;
			if (((previousValue != value) 
						|| (this._Domain.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Domain.Entity = null;
					previousValue.Projects.Remove(this);
				}
				this._Domain.Entity = value;
				if ((value != null))
				{
					value.Projects.Add(this);
					this._DomainID = value.DomainID;
				}
				else
				{
					this._DomainID = default(int);
				}
				this.SendPropertyChanged("Domain");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Fishtank_Stations(Fishtank_Station entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_Fishtank_Stations(Fishtank_Station entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fish")]
public partial class Fish : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FishID;
	
	private int _TankID;
	
	private string _Fishype;
	
	private string _Fishname;
	
	private EntitySet<Fish_Datapoint> _Fish_Datapoints;
	
	private EntityRef<Fishtank_Station> _Fishtank_Station;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFishIDChanging(int value);
    partial void OnFishIDChanged();
    partial void OnTankIDChanging(int value);
    partial void OnTankIDChanged();
    partial void OnFishypeChanging(string value);
    partial void OnFishypeChanged();
    partial void OnFishnameChanging(string value);
    partial void OnFishnameChanged();
    #endregion
	
	public Fish()
	{
		this._Fish_Datapoints = new EntitySet<Fish_Datapoint>(new Action<Fish_Datapoint>(this.attach_Fish_Datapoints), new Action<Fish_Datapoint>(this.detach_Fish_Datapoints));
		this._Fishtank_Station = default(EntityRef<Fishtank_Station>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FishID
	{
		get
		{
			return this._FishID;
		}
		set
		{
			if ((this._FishID != value))
			{
				this.OnFishIDChanging(value);
				this.SendPropertyChanging();
				this._FishID = value;
				this.SendPropertyChanged("FishID");
				this.OnFishIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankID", DbType="Int NOT NULL")]
	public int TankID
	{
		get
		{
			return this._TankID;
		}
		set
		{
			if ((this._TankID != value))
			{
				if (this._Fishtank_Station.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTankIDChanging(value);
				this.SendPropertyChanging();
				this._TankID = value;
				this.SendPropertyChanged("TankID");
				this.OnTankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fishype", DbType="VarChar(MAX)")]
	public string Fishype
	{
		get
		{
			return this._Fishype;
		}
		set
		{
			if ((this._Fishype != value))
			{
				this.OnFishypeChanging(value);
				this.SendPropertyChanging();
				this._Fishype = value;
				this.SendPropertyChanged("Fishype");
				this.OnFishypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fishname", DbType="VarChar(MAX)")]
	public string Fishname
	{
		get
		{
			return this._Fishname;
		}
		set
		{
			if ((this._Fishname != value))
			{
				this.OnFishnameChanging(value);
				this.SendPropertyChanging();
				this._Fishname = value;
				this.SendPropertyChanged("Fishname");
				this.OnFishnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Fish_Datapoint", Storage="_Fish_Datapoints", ThisKey="FishID", OtherKey="FishID")]
	public EntitySet<Fish_Datapoint> Fish_Datapoints
	{
		get
		{
			return this._Fish_Datapoints;
		}
		set
		{
			this._Fish_Datapoints.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fishtank_Station_Fish", Storage="_Fishtank_Station", ThisKey="TankID", OtherKey="FishtankID", IsForeignKey=true)]
	public Fishtank_Station Fishtank_Station
	{
		get
		{
			return this._Fishtank_Station.Entity;
		}
		set
		{
			Fishtank_Station previousValue = this._Fishtank_Station.Entity;
			if (((previousValue != value) 
						|| (this._Fishtank_Station.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Fishtank_Station.Entity = null;
					previousValue.Fishes.Remove(this);
				}
				this._Fishtank_Station.Entity = value;
				if ((value != null))
				{
					value.Fishes.Add(this);
					this._TankID = value.FishtankID;
				}
				else
				{
					this._TankID = default(int);
				}
				this.SendPropertyChanged("Fishtank_Station");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Fish_Datapoints(Fish_Datapoint entity)
	{
		this.SendPropertyChanging();
		entity.Fish = this;
	}
	
	private void detach_Fish_Datapoints(Fish_Datapoint entity)
	{
		this.SendPropertyChanging();
		entity.Fish = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fish_Datapoint")]
public partial class Fish_Datapoint : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Fish_DatapointID;
	
	private int _FishID;
	
	private System.Nullable<double> _FishWeight;
	
	private System.Nullable<double> _FishFoodWeight;
	
	private System.Nullable<double> _FishFat;
	
	private System.Nullable<System.DateTime> _Datapoint_Date;
	
	private EntityRef<Fish> _Fish;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFish_DatapointIDChanging(int value);
    partial void OnFish_DatapointIDChanged();
    partial void OnFishIDChanging(int value);
    partial void OnFishIDChanged();
    partial void OnFishWeightChanging(System.Nullable<double> value);
    partial void OnFishWeightChanged();
    partial void OnFishFoodWeightChanging(System.Nullable<double> value);
    partial void OnFishFoodWeightChanged();
    partial void OnFishFatChanging(System.Nullable<double> value);
    partial void OnFishFatChanged();
    partial void OnDatapoint_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnDatapoint_DateChanged();
    #endregion
	
	public Fish_Datapoint()
	{
		this._Fish = default(EntityRef<Fish>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fish_DatapointID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Fish_DatapointID
	{
		get
		{
			return this._Fish_DatapointID;
		}
		set
		{
			if ((this._Fish_DatapointID != value))
			{
				this.OnFish_DatapointIDChanging(value);
				this.SendPropertyChanging();
				this._Fish_DatapointID = value;
				this.SendPropertyChanged("Fish_DatapointID");
				this.OnFish_DatapointIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishID", DbType="Int NOT NULL")]
	public int FishID
	{
		get
		{
			return this._FishID;
		}
		set
		{
			if ((this._FishID != value))
			{
				if (this._Fish.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFishIDChanging(value);
				this.SendPropertyChanging();
				this._FishID = value;
				this.SendPropertyChanged("FishID");
				this.OnFishIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishWeight", DbType="Float")]
	public System.Nullable<double> FishWeight
	{
		get
		{
			return this._FishWeight;
		}
		set
		{
			if ((this._FishWeight != value))
			{
				this.OnFishWeightChanging(value);
				this.SendPropertyChanging();
				this._FishWeight = value;
				this.SendPropertyChanged("FishWeight");
				this.OnFishWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishFoodWeight", DbType="Float")]
	public System.Nullable<double> FishFoodWeight
	{
		get
		{
			return this._FishFoodWeight;
		}
		set
		{
			if ((this._FishFoodWeight != value))
			{
				this.OnFishFoodWeightChanging(value);
				this.SendPropertyChanging();
				this._FishFoodWeight = value;
				this.SendPropertyChanged("FishFoodWeight");
				this.OnFishFoodWeightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishFat", DbType="Float")]
	public System.Nullable<double> FishFat
	{
		get
		{
			return this._FishFat;
		}
		set
		{
			if ((this._FishFat != value))
			{
				this.OnFishFatChanging(value);
				this.SendPropertyChanging();
				this._FishFat = value;
				this.SendPropertyChanged("FishFat");
				this.OnFishFatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datapoint_Date", DbType="Date")]
	public System.Nullable<System.DateTime> Datapoint_Date
	{
		get
		{
			return this._Datapoint_Date;
		}
		set
		{
			if ((this._Datapoint_Date != value))
			{
				this.OnDatapoint_DateChanging(value);
				this.SendPropertyChanging();
				this._Datapoint_Date = value;
				this.SendPropertyChanged("Datapoint_Date");
				this.OnDatapoint_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fish_Fish_Datapoint", Storage="_Fish", ThisKey="FishID", OtherKey="FishID", IsForeignKey=true)]
	public Fish Fish
	{
		get
		{
			return this._Fish.Entity;
		}
		set
		{
			Fish previousValue = this._Fish.Entity;
			if (((previousValue != value) 
						|| (this._Fish.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Fish.Entity = null;
					previousValue.Fish_Datapoints.Remove(this);
				}
				this._Fish.Entity = value;
				if ((value != null))
				{
					value.Fish_Datapoints.Add(this);
					this._FishID = value.FishID;
				}
				else
				{
					this._FishID = default(int);
				}
				this.SendPropertyChanged("Fish");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.fishimage")]
public partial class fishimage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _imageID;
	
	private string _Image_Name;
	
	private System.Data.Linq.Binary _Image_data;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnimageIDChanging(int value);
    partial void OnimageIDChanged();
    partial void OnImage_NameChanging(string value);
    partial void OnImage_NameChanged();
    partial void OnImage_dataChanging(System.Data.Linq.Binary value);
    partial void OnImage_dataChanged();
    #endregion
	
	public fishimage()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_imageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int imageID
	{
		get
		{
			return this._imageID;
		}
		set
		{
			if ((this._imageID != value))
			{
				this.OnimageIDChanging(value);
				this.SendPropertyChanging();
				this._imageID = value;
				this.SendPropertyChanged("imageID");
				this.OnimageIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_Name", DbType="VarChar(MAX)")]
	public string Image_Name
	{
		get
		{
			return this._Image_Name;
		}
		set
		{
			if ((this._Image_Name != value))
			{
				this.OnImage_NameChanging(value);
				this.SendPropertyChanging();
				this._Image_Name = value;
				this.SendPropertyChanged("Image_Name");
				this.OnImage_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image_data", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Image_data
	{
		get
		{
			return this._Image_data;
		}
		set
		{
			if ((this._Image_data != value))
			{
				this.OnImage_dataChanging(value);
				this.SendPropertyChanging();
				this._Image_data = value;
				this.SendPropertyChanged("Image_data");
				this.OnImage_dataChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fishtank_Station")]
public partial class Fishtank_Station : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FishtankID;
	
	private int _ProjectID;
	
	private string _Tank_Location;
	
	private string _Tank_Name;
	
	private System.Nullable<double> _Tank_Size;
	
	private System.Nullable<System.DateTime> _Last_Maintenance_Date;
	
	private EntitySet<Fish> _Fishes;
	
	private EntitySet<Plants_Harvested> _Plants_Harvesteds;
	
	private EntityRef<Project> _Project;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFishtankIDChanging(int value);
    partial void OnFishtankIDChanged();
    partial void OnProjectIDChanging(int value);
    partial void OnProjectIDChanged();
    partial void OnTank_LocationChanging(string value);
    partial void OnTank_LocationChanged();
    partial void OnTank_NameChanging(string value);
    partial void OnTank_NameChanged();
    partial void OnTank_SizeChanging(System.Nullable<double> value);
    partial void OnTank_SizeChanged();
    partial void OnLast_Maintenance_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_Maintenance_DateChanged();
    #endregion
	
	public Fishtank_Station()
	{
		this._Fishes = new EntitySet<Fish>(new Action<Fish>(this.attach_Fishes), new Action<Fish>(this.detach_Fishes));
		this._Plants_Harvesteds = new EntitySet<Plants_Harvested>(new Action<Plants_Harvested>(this.attach_Plants_Harvesteds), new Action<Plants_Harvested>(this.detach_Plants_Harvesteds));
		this._Project = default(EntityRef<Project>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FishtankID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FishtankID
	{
		get
		{
			return this._FishtankID;
		}
		set
		{
			if ((this._FishtankID != value))
			{
				this.OnFishtankIDChanging(value);
				this.SendPropertyChanging();
				this._FishtankID = value;
				this.SendPropertyChanged("FishtankID");
				this.OnFishtankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="Int NOT NULL")]
	public int ProjectID
	{
		get
		{
			return this._ProjectID;
		}
		set
		{
			if ((this._ProjectID != value))
			{
				if (this._Project.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProjectIDChanging(value);
				this.SendPropertyChanging();
				this._ProjectID = value;
				this.SendPropertyChanged("ProjectID");
				this.OnProjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tank_Location", DbType="VarChar(50)")]
	public string Tank_Location
	{
		get
		{
			return this._Tank_Location;
		}
		set
		{
			if ((this._Tank_Location != value))
			{
				this.OnTank_LocationChanging(value);
				this.SendPropertyChanging();
				this._Tank_Location = value;
				this.SendPropertyChanged("Tank_Location");
				this.OnTank_LocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tank_Name", DbType="VarChar(50)")]
	public string Tank_Name
	{
		get
		{
			return this._Tank_Name;
		}
		set
		{
			if ((this._Tank_Name != value))
			{
				this.OnTank_NameChanging(value);
				this.SendPropertyChanging();
				this._Tank_Name = value;
				this.SendPropertyChanged("Tank_Name");
				this.OnTank_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tank_Size", DbType="Float")]
	public System.Nullable<double> Tank_Size
	{
		get
		{
			return this._Tank_Size;
		}
		set
		{
			if ((this._Tank_Size != value))
			{
				this.OnTank_SizeChanging(value);
				this.SendPropertyChanging();
				this._Tank_Size = value;
				this.SendPropertyChanged("Tank_Size");
				this.OnTank_SizeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Maintenance_Date", DbType="Date")]
	public System.Nullable<System.DateTime> Last_Maintenance_Date
	{
		get
		{
			return this._Last_Maintenance_Date;
		}
		set
		{
			if ((this._Last_Maintenance_Date != value))
			{
				this.OnLast_Maintenance_DateChanging(value);
				this.SendPropertyChanging();
				this._Last_Maintenance_Date = value;
				this.SendPropertyChanged("Last_Maintenance_Date");
				this.OnLast_Maintenance_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fishtank_Station_Fish", Storage="_Fishes", ThisKey="FishtankID", OtherKey="TankID")]
	public EntitySet<Fish> Fishes
	{
		get
		{
			return this._Fishes;
		}
		set
		{
			this._Fishes.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fishtank_Station_Plants_Harvested", Storage="_Plants_Harvesteds", ThisKey="FishtankID", OtherKey="Tank_ID")]
	public EntitySet<Plants_Harvested> Plants_Harvesteds
	{
		get
		{
			return this._Plants_Harvesteds;
		}
		set
		{
			this._Plants_Harvesteds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Fishtank_Station", Storage="_Project", ThisKey="ProjectID", OtherKey="ProjectID", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.Fishtank_Stations.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.Fishtank_Stations.Add(this);
					this._ProjectID = value.ProjectID;
				}
				else
				{
					this._ProjectID = default(int);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Fishes(Fish entity)
	{
		this.SendPropertyChanging();
		entity.Fishtank_Station = this;
	}
	
	private void detach_Fishes(Fish entity)
	{
		this.SendPropertyChanging();
		entity.Fishtank_Station = null;
	}
	
	private void attach_Plants_Harvesteds(Plants_Harvested entity)
	{
		this.SendPropertyChanging();
		entity.Fishtank_Station = this;
	}
	
	private void detach_Plants_Harvesteds(Plants_Harvested entity)
	{
		this.SendPropertyChanging();
		entity.Fishtank_Station = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.foodWaste")]
public partial class foodWaste : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.DateTime _date;
	
	private double _weight;
	
	private double _percentGrains;
	
	private double _percentFruit;
	
	private double _percentVeg;
	
	private double _percentDairy;
	
	private int _datapointID;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnweightChanging(double value);
    partial void OnweightChanged();
    partial void OnpercentGrainsChanging(double value);
    partial void OnpercentGrainsChanged();
    partial void OnpercentFruitChanging(double value);
    partial void OnpercentFruitChanged();
    partial void OnpercentVegChanging(double value);
    partial void OnpercentVegChanged();
    partial void OnpercentDairyChanging(double value);
    partial void OnpercentDairyChanged();
    partial void OndatapointIDChanging(int value);
    partial void OndatapointIDChanged();
    #endregion
	
	public foodWaste()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
	public System.DateTime date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float NOT NULL")]
	public double weight
	{
		get
		{
			return this._weight;
		}
		set
		{
			if ((this._weight != value))
			{
				this.OnweightChanging(value);
				this.SendPropertyChanging();
				this._weight = value;
				this.SendPropertyChanged("weight");
				this.OnweightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentGrains", DbType="Float NOT NULL")]
	public double percentGrains
	{
		get
		{
			return this._percentGrains;
		}
		set
		{
			if ((this._percentGrains != value))
			{
				this.OnpercentGrainsChanging(value);
				this.SendPropertyChanging();
				this._percentGrains = value;
				this.SendPropertyChanged("percentGrains");
				this.OnpercentGrainsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentFruit", DbType="Float NOT NULL")]
	public double percentFruit
	{
		get
		{
			return this._percentFruit;
		}
		set
		{
			if ((this._percentFruit != value))
			{
				this.OnpercentFruitChanging(value);
				this.SendPropertyChanging();
				this._percentFruit = value;
				this.SendPropertyChanged("percentFruit");
				this.OnpercentFruitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentVeg", DbType="Float NOT NULL")]
	public double percentVeg
	{
		get
		{
			return this._percentVeg;
		}
		set
		{
			if ((this._percentVeg != value))
			{
				this.OnpercentVegChanging(value);
				this.SendPropertyChanging();
				this._percentVeg = value;
				this.SendPropertyChanged("percentVeg");
				this.OnpercentVegChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentDairy", DbType="Float NOT NULL")]
	public double percentDairy
	{
		get
		{
			return this._percentDairy;
		}
		set
		{
			if ((this._percentDairy != value))
			{
				this.OnpercentDairyChanging(value);
				this.SendPropertyChanging();
				this._percentDairy = value;
				this.SendPropertyChanged("percentDairy");
				this.OnpercentDairyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datapointID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int datapointID
	{
		get
		{
			return this._datapointID;
		}
		set
		{
			if ((this._datapointID != value))
			{
				this.OndatapointIDChanging(value);
				this.SendPropertyChanging();
				this._datapointID = value;
				this.SendPropertyChanged("datapointID");
				this.OndatapointIDChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plant")]
public partial class Plant : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Plant_TypeID;
	
	private string _Plant_Name;
	
	private EntitySet<Plants_Harvested> _Plants_Harvesteds;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlant_TypeIDChanging(int value);
    partial void OnPlant_TypeIDChanged();
    partial void OnPlant_NameChanging(string value);
    partial void OnPlant_NameChanged();
    #endregion
	
	public Plant()
	{
		this._Plants_Harvesteds = new EntitySet<Plants_Harvested>(new Action<Plants_Harvested>(this.attach_Plants_Harvesteds), new Action<Plants_Harvested>(this.detach_Plants_Harvesteds));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plant_TypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Plant_TypeID
	{
		get
		{
			return this._Plant_TypeID;
		}
		set
		{
			if ((this._Plant_TypeID != value))
			{
				this.OnPlant_TypeIDChanging(value);
				this.SendPropertyChanging();
				this._Plant_TypeID = value;
				this.SendPropertyChanged("Plant_TypeID");
				this.OnPlant_TypeIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plant_Name", DbType="VarChar(MAX)")]
	public string Plant_Name
	{
		get
		{
			return this._Plant_Name;
		}
		set
		{
			if ((this._Plant_Name != value))
			{
				this.OnPlant_NameChanging(value);
				this.SendPropertyChanging();
				this._Plant_Name = value;
				this.SendPropertyChanged("Plant_Name");
				this.OnPlant_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_Plants_Harvested", Storage="_Plants_Harvesteds", ThisKey="Plant_TypeID", OtherKey="Plant_ID")]
	public EntitySet<Plants_Harvested> Plants_Harvesteds
	{
		get
		{
			return this._Plants_Harvesteds;
		}
		set
		{
			this._Plants_Harvesteds.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Plants_Harvesteds(Plants_Harvested entity)
	{
		this.SendPropertyChanging();
		entity.Plant = this;
	}
	
	private void detach_Plants_Harvesteds(Plants_Harvested entity)
	{
		this.SendPropertyChanging();
		entity.Plant = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plants_Harvested")]
public partial class Plants_Harvested : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Harvest_DatapointID;
	
	private int _Plant_ID;
	
	private int _Tank_ID;
	
	private System.DateTime _Harvest_Date;
	
	private double _Harvest_Amount;
	
	private EntityRef<Plant> _Plant;
	
	private EntityRef<Fishtank_Station> _Fishtank_Station;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHarvest_DatapointIDChanging(int value);
    partial void OnHarvest_DatapointIDChanged();
    partial void OnPlant_IDChanging(int value);
    partial void OnPlant_IDChanged();
    partial void OnTank_IDChanging(int value);
    partial void OnTank_IDChanged();
    partial void OnHarvest_DateChanging(System.DateTime value);
    partial void OnHarvest_DateChanged();
    partial void OnHarvest_AmountChanging(double value);
    partial void OnHarvest_AmountChanged();
    #endregion
	
	public Plants_Harvested()
	{
		this._Plant = default(EntityRef<Plant>);
		this._Fishtank_Station = default(EntityRef<Fishtank_Station>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Harvest_DatapointID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Harvest_DatapointID
	{
		get
		{
			return this._Harvest_DatapointID;
		}
		set
		{
			if ((this._Harvest_DatapointID != value))
			{
				this.OnHarvest_DatapointIDChanging(value);
				this.SendPropertyChanging();
				this._Harvest_DatapointID = value;
				this.SendPropertyChanged("Harvest_DatapointID");
				this.OnHarvest_DatapointIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Plant_ID", DbType="Int NOT NULL")]
	public int Plant_ID
	{
		get
		{
			return this._Plant_ID;
		}
		set
		{
			if ((this._Plant_ID != value))
			{
				if (this._Plant.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlant_IDChanging(value);
				this.SendPropertyChanging();
				this._Plant_ID = value;
				this.SendPropertyChanged("Plant_ID");
				this.OnPlant_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tank_ID", DbType="Int NOT NULL")]
	public int Tank_ID
	{
		get
		{
			return this._Tank_ID;
		}
		set
		{
			if ((this._Tank_ID != value))
			{
				if (this._Fishtank_Station.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTank_IDChanging(value);
				this.SendPropertyChanging();
				this._Tank_ID = value;
				this.SendPropertyChanged("Tank_ID");
				this.OnTank_IDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Harvest_Date", DbType="Date NOT NULL")]
	public System.DateTime Harvest_Date
	{
		get
		{
			return this._Harvest_Date;
		}
		set
		{
			if ((this._Harvest_Date != value))
			{
				this.OnHarvest_DateChanging(value);
				this.SendPropertyChanging();
				this._Harvest_Date = value;
				this.SendPropertyChanged("Harvest_Date");
				this.OnHarvest_DateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Harvest_Amount", DbType="Float NOT NULL")]
	public double Harvest_Amount
	{
		get
		{
			return this._Harvest_Amount;
		}
		set
		{
			if ((this._Harvest_Amount != value))
			{
				this.OnHarvest_AmountChanging(value);
				this.SendPropertyChanging();
				this._Harvest_Amount = value;
				this.SendPropertyChanged("Harvest_Amount");
				this.OnHarvest_AmountChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Plant_Plants_Harvested", Storage="_Plant", ThisKey="Plant_ID", OtherKey="Plant_TypeID", IsForeignKey=true)]
	public Plant Plant
	{
		get
		{
			return this._Plant.Entity;
		}
		set
		{
			Plant previousValue = this._Plant.Entity;
			if (((previousValue != value) 
						|| (this._Plant.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Plant.Entity = null;
					previousValue.Plants_Harvesteds.Remove(this);
				}
				this._Plant.Entity = value;
				if ((value != null))
				{
					value.Plants_Harvesteds.Add(this);
					this._Plant_ID = value.Plant_TypeID;
				}
				else
				{
					this._Plant_ID = default(int);
				}
				this.SendPropertyChanged("Plant");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fishtank_Station_Plants_Harvested", Storage="_Fishtank_Station", ThisKey="Tank_ID", OtherKey="FishtankID", IsForeignKey=true)]
	public Fishtank_Station Fishtank_Station
	{
		get
		{
			return this._Fishtank_Station.Entity;
		}
		set
		{
			Fishtank_Station previousValue = this._Fishtank_Station.Entity;
			if (((previousValue != value) 
						|| (this._Fishtank_Station.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Fishtank_Station.Entity = null;
					previousValue.Plants_Harvesteds.Remove(this);
				}
				this._Fishtank_Station.Entity = value;
				if ((value != null))
				{
					value.Plants_Harvesteds.Add(this);
					this._Tank_ID = value.FishtankID;
				}
				else
				{
					this._Tank_ID = default(int);
				}
				this.SendPropertyChanged("Fishtank_Station");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Compost")]
public partial class Compost : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private System.DateTime _date;
	
	private double _weight;
	
	private double _percentGrains;
	
	private double _percentFruit;
	
	private double _percentVeg;
	
	private double _percentDairy;
	
	private int _datapointID;
	
	private System.Nullable<double> _percentPaper;
	
	private System.Nullable<double> _percentCoffeeGrounds;
	
	private System.Nullable<bool> _trashPresent;
	
	private string _Notes;
	
	private string _wasteType;
	
	private string _Vendor;
	
	private System.Nullable<double> _percentOilFull;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnweightChanging(double value);
    partial void OnweightChanged();
    partial void OnpercentGrainsChanging(double value);
    partial void OnpercentGrainsChanged();
    partial void OnpercentFruitChanging(double value);
    partial void OnpercentFruitChanged();
    partial void OnpercentVegChanging(double value);
    partial void OnpercentVegChanged();
    partial void OnpercentDairyChanging(double value);
    partial void OnpercentDairyChanged();
    partial void OndatapointIDChanging(int value);
    partial void OndatapointIDChanged();
    partial void OnpercentPaperChanging(System.Nullable<double> value);
    partial void OnpercentPaperChanged();
    partial void OnpercentCoffeeGroundsChanging(System.Nullable<double> value);
    partial void OnpercentCoffeeGroundsChanged();
    partial void OntrashPresentChanging(System.Nullable<bool> value);
    partial void OntrashPresentChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnwasteTypeChanging(string value);
    partial void OnwasteTypeChanged();
    partial void OnVendorChanging(string value);
    partial void OnVendorChanged();
    partial void OnpercentOilFullChanging(System.Nullable<double> value);
    partial void OnpercentOilFullChanged();
    #endregion
	
	public Compost()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
	public System.DateTime date
	{
		get
		{
			return this._date;
		}
		set
		{
			if ((this._date != value))
			{
				this.OndateChanging(value);
				this.SendPropertyChanging();
				this._date = value;
				this.SendPropertyChanged("date");
				this.OndateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="Float NOT NULL")]
	public double weight
	{
		get
		{
			return this._weight;
		}
		set
		{
			if ((this._weight != value))
			{
				this.OnweightChanging(value);
				this.SendPropertyChanging();
				this._weight = value;
				this.SendPropertyChanged("weight");
				this.OnweightChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentGrains", DbType="Float NOT NULL")]
	public double percentGrains
	{
		get
		{
			return this._percentGrains;
		}
		set
		{
			if ((this._percentGrains != value))
			{
				this.OnpercentGrainsChanging(value);
				this.SendPropertyChanging();
				this._percentGrains = value;
				this.SendPropertyChanged("percentGrains");
				this.OnpercentGrainsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentFruit", DbType="Float NOT NULL")]
	public double percentFruit
	{
		get
		{
			return this._percentFruit;
		}
		set
		{
			if ((this._percentFruit != value))
			{
				this.OnpercentFruitChanging(value);
				this.SendPropertyChanging();
				this._percentFruit = value;
				this.SendPropertyChanged("percentFruit");
				this.OnpercentFruitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentVeg", DbType="Float NOT NULL")]
	public double percentVeg
	{
		get
		{
			return this._percentVeg;
		}
		set
		{
			if ((this._percentVeg != value))
			{
				this.OnpercentVegChanging(value);
				this.SendPropertyChanging();
				this._percentVeg = value;
				this.SendPropertyChanged("percentVeg");
				this.OnpercentVegChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentDairy", DbType="Float NOT NULL")]
	public double percentDairy
	{
		get
		{
			return this._percentDairy;
		}
		set
		{
			if ((this._percentDairy != value))
			{
				this.OnpercentDairyChanging(value);
				this.SendPropertyChanging();
				this._percentDairy = value;
				this.SendPropertyChanged("percentDairy");
				this.OnpercentDairyChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_datapointID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int datapointID
	{
		get
		{
			return this._datapointID;
		}
		set
		{
			if ((this._datapointID != value))
			{
				this.OndatapointIDChanging(value);
				this.SendPropertyChanging();
				this._datapointID = value;
				this.SendPropertyChanged("datapointID");
				this.OndatapointIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentPaper", DbType="Float")]
	public System.Nullable<double> percentPaper
	{
		get
		{
			return this._percentPaper;
		}
		set
		{
			if ((this._percentPaper != value))
			{
				this.OnpercentPaperChanging(value);
				this.SendPropertyChanging();
				this._percentPaper = value;
				this.SendPropertyChanged("percentPaper");
				this.OnpercentPaperChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentCoffeeGrounds", DbType="Float")]
	public System.Nullable<double> percentCoffeeGrounds
	{
		get
		{
			return this._percentCoffeeGrounds;
		}
		set
		{
			if ((this._percentCoffeeGrounds != value))
			{
				this.OnpercentCoffeeGroundsChanging(value);
				this.SendPropertyChanging();
				this._percentCoffeeGrounds = value;
				this.SendPropertyChanged("percentCoffeeGrounds");
				this.OnpercentCoffeeGroundsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trashPresent", DbType="Bit")]
	public System.Nullable<bool> trashPresent
	{
		get
		{
			return this._trashPresent;
		}
		set
		{
			if ((this._trashPresent != value))
			{
				this.OntrashPresentChanging(value);
				this.SendPropertyChanging();
				this._trashPresent = value;
				this.SendPropertyChanged("trashPresent");
				this.OntrashPresentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wasteType", DbType="NVarChar(50)")]
	public string wasteType
	{
		get
		{
			return this._wasteType;
		}
		set
		{
			if ((this._wasteType != value))
			{
				this.OnwasteTypeChanging(value);
				this.SendPropertyChanging();
				this._wasteType = value;
				this.SendPropertyChanged("wasteType");
				this.OnwasteTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vendor", DbType="NVarChar(50)")]
	public string Vendor
	{
		get
		{
			return this._Vendor;
		}
		set
		{
			if ((this._Vendor != value))
			{
				this.OnVendorChanging(value);
				this.SendPropertyChanging();
				this._Vendor = value;
				this.SendPropertyChanged("Vendor");
				this.OnVendorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_percentOilFull", DbType="Float")]
	public System.Nullable<double> percentOilFull
	{
		get
		{
			return this._percentOilFull;
		}
		set
		{
			if ((this._percentOilFull != value))
			{
				this.OnpercentOilFullChanging(value);
				this.SendPropertyChanging();
				this._percentOilFull = value;
				this.SendPropertyChanged("percentOilFull");
				this.OnpercentOilFullChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Biodiesel")]
public partial class Biodiesel : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _BatchNumber;
	
	private System.DateTime _StartRunDate;
	
	private System.DateTime _EndRunDate;
	
	private double _TotalProcessingTime;
	
	private double _VolumeWasteOilColleted;
	
	private double _VolumeWasteOilProduced;
	
	private double _VolumeBiodieselProduced;
	
	private double _VolumeWasteProduced;
	
	private double _EnergyRequired;
	
	private double _MethanolUsed;
	
	private double _PotassiumHydroxideUsed;
	
	private bool _QualityPassFail;
	
	private decimal _CostOfWasteOil;
	
	private double _ManHours;
	
	private decimal _CostOfDisposal;
	
	private decimal _MarketCostBiodiesel;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBatchNumberChanging(int value);
    partial void OnBatchNumberChanged();
    partial void OnStartRunDateChanging(System.DateTime value);
    partial void OnStartRunDateChanged();
    partial void OnEndRunDateChanging(System.DateTime value);
    partial void OnEndRunDateChanged();
    partial void OnTotalProcessingTimeChanging(double value);
    partial void OnTotalProcessingTimeChanged();
    partial void OnVolumeWasteOilColletedChanging(double value);
    partial void OnVolumeWasteOilColletedChanged();
    partial void OnVolumeWasteOilProducedChanging(double value);
    partial void OnVolumeWasteOilProducedChanged();
    partial void OnVolumeBiodieselProducedChanging(double value);
    partial void OnVolumeBiodieselProducedChanged();
    partial void OnVolumeWasteProducedChanging(double value);
    partial void OnVolumeWasteProducedChanged();
    partial void OnEnergyRequiredChanging(double value);
    partial void OnEnergyRequiredChanged();
    partial void OnMethanolUsedChanging(double value);
    partial void OnMethanolUsedChanged();
    partial void OnPotassiumHydroxideUsedChanging(double value);
    partial void OnPotassiumHydroxideUsedChanged();
    partial void OnQualityPassFailChanging(bool value);
    partial void OnQualityPassFailChanged();
    partial void OnCostOfWasteOilChanging(decimal value);
    partial void OnCostOfWasteOilChanged();
    partial void OnManHoursChanging(double value);
    partial void OnManHoursChanged();
    partial void OnCostOfDisposalChanging(decimal value);
    partial void OnCostOfDisposalChanged();
    partial void OnMarketCostBiodieselChanging(decimal value);
    partial void OnMarketCostBiodieselChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public Biodiesel()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BatchNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int BatchNumber
	{
		get
		{
			return this._BatchNumber;
		}
		set
		{
			if ((this._BatchNumber != value))
			{
				this.OnBatchNumberChanging(value);
				this.SendPropertyChanging();
				this._BatchNumber = value;
				this.SendPropertyChanged("BatchNumber");
				this.OnBatchNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartRunDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartRunDate
	{
		get
		{
			return this._StartRunDate;
		}
		set
		{
			if ((this._StartRunDate != value))
			{
				this.OnStartRunDateChanging(value);
				this.SendPropertyChanging();
				this._StartRunDate = value;
				this.SendPropertyChanged("StartRunDate");
				this.OnStartRunDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndRunDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndRunDate
	{
		get
		{
			return this._EndRunDate;
		}
		set
		{
			if ((this._EndRunDate != value))
			{
				this.OnEndRunDateChanging(value);
				this.SendPropertyChanging();
				this._EndRunDate = value;
				this.SendPropertyChanged("EndRunDate");
				this.OnEndRunDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalProcessingTime", DbType="Float NOT NULL")]
	public double TotalProcessingTime
	{
		get
		{
			return this._TotalProcessingTime;
		}
		set
		{
			if ((this._TotalProcessingTime != value))
			{
				this.OnTotalProcessingTimeChanging(value);
				this.SendPropertyChanging();
				this._TotalProcessingTime = value;
				this.SendPropertyChanged("TotalProcessingTime");
				this.OnTotalProcessingTimeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeWasteOilColleted", DbType="Float NOT NULL")]
	public double VolumeWasteOilColleted
	{
		get
		{
			return this._VolumeWasteOilColleted;
		}
		set
		{
			if ((this._VolumeWasteOilColleted != value))
			{
				this.OnVolumeWasteOilColletedChanging(value);
				this.SendPropertyChanging();
				this._VolumeWasteOilColleted = value;
				this.SendPropertyChanged("VolumeWasteOilColleted");
				this.OnVolumeWasteOilColletedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeWasteOilProduced", DbType="Float NOT NULL")]
	public double VolumeWasteOilProduced
	{
		get
		{
			return this._VolumeWasteOilProduced;
		}
		set
		{
			if ((this._VolumeWasteOilProduced != value))
			{
				this.OnVolumeWasteOilProducedChanging(value);
				this.SendPropertyChanging();
				this._VolumeWasteOilProduced = value;
				this.SendPropertyChanged("VolumeWasteOilProduced");
				this.OnVolumeWasteOilProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeBiodieselProduced", DbType="Float NOT NULL")]
	public double VolumeBiodieselProduced
	{
		get
		{
			return this._VolumeBiodieselProduced;
		}
		set
		{
			if ((this._VolumeBiodieselProduced != value))
			{
				this.OnVolumeBiodieselProducedChanging(value);
				this.SendPropertyChanging();
				this._VolumeBiodieselProduced = value;
				this.SendPropertyChanged("VolumeBiodieselProduced");
				this.OnVolumeBiodieselProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeWasteProduced", DbType="Float NOT NULL")]
	public double VolumeWasteProduced
	{
		get
		{
			return this._VolumeWasteProduced;
		}
		set
		{
			if ((this._VolumeWasteProduced != value))
			{
				this.OnVolumeWasteProducedChanging(value);
				this.SendPropertyChanging();
				this._VolumeWasteProduced = value;
				this.SendPropertyChanged("VolumeWasteProduced");
				this.OnVolumeWasteProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyRequired", DbType="Float NOT NULL")]
	public double EnergyRequired
	{
		get
		{
			return this._EnergyRequired;
		}
		set
		{
			if ((this._EnergyRequired != value))
			{
				this.OnEnergyRequiredChanging(value);
				this.SendPropertyChanging();
				this._EnergyRequired = value;
				this.SendPropertyChanged("EnergyRequired");
				this.OnEnergyRequiredChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MethanolUsed", DbType="Float NOT NULL")]
	public double MethanolUsed
	{
		get
		{
			return this._MethanolUsed;
		}
		set
		{
			if ((this._MethanolUsed != value))
			{
				this.OnMethanolUsedChanging(value);
				this.SendPropertyChanging();
				this._MethanolUsed = value;
				this.SendPropertyChanged("MethanolUsed");
				this.OnMethanolUsedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PotassiumHydroxideUsed", DbType="Float NOT NULL")]
	public double PotassiumHydroxideUsed
	{
		get
		{
			return this._PotassiumHydroxideUsed;
		}
		set
		{
			if ((this._PotassiumHydroxideUsed != value))
			{
				this.OnPotassiumHydroxideUsedChanging(value);
				this.SendPropertyChanging();
				this._PotassiumHydroxideUsed = value;
				this.SendPropertyChanged("PotassiumHydroxideUsed");
				this.OnPotassiumHydroxideUsedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityPassFail", DbType="Bit NOT NULL")]
	public bool QualityPassFail
	{
		get
		{
			return this._QualityPassFail;
		}
		set
		{
			if ((this._QualityPassFail != value))
			{
				this.OnQualityPassFailChanging(value);
				this.SendPropertyChanging();
				this._QualityPassFail = value;
				this.SendPropertyChanged("QualityPassFail");
				this.OnQualityPassFailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfWasteOil", DbType="Money NOT NULL")]
	public decimal CostOfWasteOil
	{
		get
		{
			return this._CostOfWasteOil;
		}
		set
		{
			if ((this._CostOfWasteOil != value))
			{
				this.OnCostOfWasteOilChanging(value);
				this.SendPropertyChanging();
				this._CostOfWasteOil = value;
				this.SendPropertyChanged("CostOfWasteOil");
				this.OnCostOfWasteOilChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManHours", DbType="Float NOT NULL")]
	public double ManHours
	{
		get
		{
			return this._ManHours;
		}
		set
		{
			if ((this._ManHours != value))
			{
				this.OnManHoursChanging(value);
				this.SendPropertyChanging();
				this._ManHours = value;
				this.SendPropertyChanged("ManHours");
				this.OnManHoursChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfDisposal", DbType="Money NOT NULL")]
	public decimal CostOfDisposal
	{
		get
		{
			return this._CostOfDisposal;
		}
		set
		{
			if ((this._CostOfDisposal != value))
			{
				this.OnCostOfDisposalChanging(value);
				this.SendPropertyChanging();
				this._CostOfDisposal = value;
				this.SendPropertyChanged("CostOfDisposal");
				this.OnCostOfDisposalChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCostBiodiesel", DbType="Money NOT NULL")]
	public decimal MarketCostBiodiesel
	{
		get
		{
			return this._MarketCostBiodiesel;
		}
		set
		{
			if ((this._MarketCostBiodiesel != value))
			{
				this.OnMarketCostBiodieselChanging(value);
				this.SendPropertyChanging();
				this._MarketCostBiodiesel = value;
				this.SendPropertyChanged("MarketCostBiodiesel");
				this.OnMarketCostBiodieselChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vermiculture")]
public partial class Vermiculture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _StartDate;
	
	private System.DateTime _EndDate;
	
	private double _VolumeCompostProduced;
	
	private double _BedTemperature;
	
	private double _BedMoisture;
	
	private double _TeaProduced;
	
	private decimal _ProductionCost;
	
	private decimal _MarketValue;
	
	private System.Nullable<int> _WormsAdded;
	
	private System.Nullable<int> _WormRemoved;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnVolumeCompostProducedChanging(double value);
    partial void OnVolumeCompostProducedChanged();
    partial void OnBedTemperatureChanging(double value);
    partial void OnBedTemperatureChanged();
    partial void OnBedMoistureChanging(double value);
    partial void OnBedMoistureChanged();
    partial void OnTeaProducedChanging(double value);
    partial void OnTeaProducedChanged();
    partial void OnProductionCostChanging(decimal value);
    partial void OnProductionCostChanged();
    partial void OnMarketValueChanging(decimal value);
    partial void OnMarketValueChanged();
    partial void OnWormsAddedChanging(System.Nullable<int> value);
    partial void OnWormsAddedChanged();
    partial void OnWormRemovedChanging(System.Nullable<int> value);
    partial void OnWormRemovedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public Vermiculture()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
	public System.DateTime StartDate
	{
		get
		{
			return this._StartDate;
		}
		set
		{
			if ((this._StartDate != value))
			{
				this.OnStartDateChanging(value);
				this.SendPropertyChanging();
				this._StartDate = value;
				this.SendPropertyChanged("StartDate");
				this.OnStartDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
	public System.DateTime EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeCompostProduced", DbType="Float NOT NULL")]
	public double VolumeCompostProduced
	{
		get
		{
			return this._VolumeCompostProduced;
		}
		set
		{
			if ((this._VolumeCompostProduced != value))
			{
				this.OnVolumeCompostProducedChanging(value);
				this.SendPropertyChanging();
				this._VolumeCompostProduced = value;
				this.SendPropertyChanged("VolumeCompostProduced");
				this.OnVolumeCompostProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedTemperature", DbType="Float NOT NULL")]
	public double BedTemperature
	{
		get
		{
			return this._BedTemperature;
		}
		set
		{
			if ((this._BedTemperature != value))
			{
				this.OnBedTemperatureChanging(value);
				this.SendPropertyChanging();
				this._BedTemperature = value;
				this.SendPropertyChanged("BedTemperature");
				this.OnBedTemperatureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BedMoisture", DbType="Float NOT NULL")]
	public double BedMoisture
	{
		get
		{
			return this._BedMoisture;
		}
		set
		{
			if ((this._BedMoisture != value))
			{
				this.OnBedMoistureChanging(value);
				this.SendPropertyChanging();
				this._BedMoisture = value;
				this.SendPropertyChanged("BedMoisture");
				this.OnBedMoistureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeaProduced", DbType="Float NOT NULL")]
	public double TeaProduced
	{
		get
		{
			return this._TeaProduced;
		}
		set
		{
			if ((this._TeaProduced != value))
			{
				this.OnTeaProducedChanging(value);
				this.SendPropertyChanging();
				this._TeaProduced = value;
				this.SendPropertyChanged("TeaProduced");
				this.OnTeaProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionCost", DbType="Money NOT NULL")]
	public decimal ProductionCost
	{
		get
		{
			return this._ProductionCost;
		}
		set
		{
			if ((this._ProductionCost != value))
			{
				this.OnProductionCostChanging(value);
				this.SendPropertyChanging();
				this._ProductionCost = value;
				this.SendPropertyChanged("ProductionCost");
				this.OnProductionCostChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketValue", DbType="Money NOT NULL")]
	public decimal MarketValue
	{
		get
		{
			return this._MarketValue;
		}
		set
		{
			if ((this._MarketValue != value))
			{
				this.OnMarketValueChanging(value);
				this.SendPropertyChanging();
				this._MarketValue = value;
				this.SendPropertyChanged("MarketValue");
				this.OnMarketValueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WormsAdded", DbType="Int")]
	public System.Nullable<int> WormsAdded
	{
		get
		{
			return this._WormsAdded;
		}
		set
		{
			if ((this._WormsAdded != value))
			{
				this.OnWormsAddedChanging(value);
				this.SendPropertyChanging();
				this._WormsAdded = value;
				this.SendPropertyChanged("WormsAdded");
				this.OnWormsAddedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WormRemoved", DbType="Int")]
	public System.Nullable<int> WormRemoved
	{
		get
		{
			return this._WormRemoved;
		}
		set
		{
			if ((this._WormRemoved != value))
			{
				this.OnWormRemovedChanging(value);
				this.SendPropertyChanging();
				this._WormRemoved = value;
				this.SendPropertyChanged("WormRemoved");
				this.OnWormRemovedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnergyProduction")]
public partial class EnergyProduction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _EnergyProducer;
	
	private System.DateTime _Date;
	
	private double _AmountEnergyCreated;
	
	private double _PercentageOfEnergyProduced;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEnergyProducerChanging(string value);
    partial void OnEnergyProducerChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAmountEnergyCreatedChanging(double value);
    partial void OnAmountEnergyCreatedChanged();
    partial void OnPercentageOfEnergyProducedChanging(double value);
    partial void OnPercentageOfEnergyProducedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public EnergyProduction()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyProducer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string EnergyProducer
	{
		get
		{
			return this._EnergyProducer;
		}
		set
		{
			if ((this._EnergyProducer != value))
			{
				this.OnEnergyProducerChanging(value);
				this.SendPropertyChanging();
				this._EnergyProducer = value;
				this.SendPropertyChanged("EnergyProducer");
				this.OnEnergyProducerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountEnergyCreated", DbType="Float NOT NULL")]
	public double AmountEnergyCreated
	{
		get
		{
			return this._AmountEnergyCreated;
		}
		set
		{
			if ((this._AmountEnergyCreated != value))
			{
				this.OnAmountEnergyCreatedChanging(value);
				this.SendPropertyChanging();
				this._AmountEnergyCreated = value;
				this.SendPropertyChanged("AmountEnergyCreated");
				this.OnAmountEnergyCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentageOfEnergyProduced", DbType="Float NOT NULL")]
	public double PercentageOfEnergyProduced
	{
		get
		{
			return this._PercentageOfEnergyProduced;
		}
		set
		{
			if ((this._PercentageOfEnergyProduced != value))
			{
				this.OnPercentageOfEnergyProducedChanging(value);
				this.SendPropertyChanging();
				this._PercentageOfEnergyProduced = value;
				this.SendPropertyChanged("PercentageOfEnergyProduced");
				this.OnPercentageOfEnergyProducedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnergyConsumed")]
public partial class EnergyConsumed : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _EnergyConsumer;
	
	private string _SourceOfEnergyUse;
	
	private System.DateTime _Date;
	
	private double _kWPerHour;
	
	private decimal _CostkWPerHour;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEnergyConsumerChanging(string value);
    partial void OnEnergyConsumerChanged();
    partial void OnSourceOfEnergyUseChanging(string value);
    partial void OnSourceOfEnergyUseChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnkWPerHourChanging(double value);
    partial void OnkWPerHourChanged();
    partial void OnCostkWPerHourChanging(decimal value);
    partial void OnCostkWPerHourChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public EnergyConsumed()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnergyConsumer", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string EnergyConsumer
	{
		get
		{
			return this._EnergyConsumer;
		}
		set
		{
			if ((this._EnergyConsumer != value))
			{
				this.OnEnergyConsumerChanging(value);
				this.SendPropertyChanging();
				this._EnergyConsumer = value;
				this.SendPropertyChanged("EnergyConsumer");
				this.OnEnergyConsumerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceOfEnergyUse", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string SourceOfEnergyUse
	{
		get
		{
			return this._SourceOfEnergyUse;
		}
		set
		{
			if ((this._SourceOfEnergyUse != value))
			{
				this.OnSourceOfEnergyUseChanging(value);
				this.SendPropertyChanging();
				this._SourceOfEnergyUse = value;
				this.SendPropertyChanged("SourceOfEnergyUse");
				this.OnSourceOfEnergyUseChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kWPerHour", DbType="Float NOT NULL")]
	public double kWPerHour
	{
		get
		{
			return this._kWPerHour;
		}
		set
		{
			if ((this._kWPerHour != value))
			{
				this.OnkWPerHourChanging(value);
				this.SendPropertyChanging();
				this._kWPerHour = value;
				this.SendPropertyChanged("kWPerHour");
				this.OnkWPerHourChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostkWPerHour", DbType="Money NOT NULL")]
	public decimal CostkWPerHour
	{
		get
		{
			return this._CostkWPerHour;
		}
		set
		{
			if ((this._CostkWPerHour != value))
			{
				this.OnCostkWPerHourChanging(value);
				this.SendPropertyChanging();
				this._CostkWPerHour = value;
				this.SendPropertyChanged("CostkWPerHour");
				this.OnCostkWPerHourChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AquaFish")]
public partial class AquaFish : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _Date;
	
	private string _TankLocation;
	
	private string _Specie;
	
	private int _NumberOfFish;
	
	private double _TankTemp;
	
	private string _HealthOfFish;
	
	private string _QualityOfWater;
	
	private System.DateTime _LastDateOfWaterChange;
	
	private System.DateTime _DateBufferAdded;
	
	private double _AmountBufferAdded;
	
	private System.DateTime _DateLastFed;
	
	private double _AmountFed;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTankLocationChanging(string value);
    partial void OnTankLocationChanged();
    partial void OnSpecieChanging(string value);
    partial void OnSpecieChanged();
    partial void OnNumberOfFishChanging(int value);
    partial void OnNumberOfFishChanged();
    partial void OnTankTempChanging(double value);
    partial void OnTankTempChanged();
    partial void OnHealthOfFishChanging(string value);
    partial void OnHealthOfFishChanged();
    partial void OnQualityOfWaterChanging(string value);
    partial void OnQualityOfWaterChanged();
    partial void OnLastDateOfWaterChangeChanging(System.DateTime value);
    partial void OnLastDateOfWaterChangeChanged();
    partial void OnDateBufferAddedChanging(System.DateTime value);
    partial void OnDateBufferAddedChanged();
    partial void OnAmountBufferAddedChanging(double value);
    partial void OnAmountBufferAddedChanged();
    partial void OnDateLastFedChanging(System.DateTime value);
    partial void OnDateLastFedChanged();
    partial void OnAmountFedChanging(double value);
    partial void OnAmountFedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public AquaFish()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankLocation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TankLocation
	{
		get
		{
			return this._TankLocation;
		}
		set
		{
			if ((this._TankLocation != value))
			{
				this.OnTankLocationChanging(value);
				this.SendPropertyChanging();
				this._TankLocation = value;
				this.SendPropertyChanged("TankLocation");
				this.OnTankLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specie", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Specie
	{
		get
		{
			return this._Specie;
		}
		set
		{
			if ((this._Specie != value))
			{
				this.OnSpecieChanging(value);
				this.SendPropertyChanging();
				this._Specie = value;
				this.SendPropertyChanged("Specie");
				this.OnSpecieChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfFish", DbType="Int NOT NULL")]
	public int NumberOfFish
	{
		get
		{
			return this._NumberOfFish;
		}
		set
		{
			if ((this._NumberOfFish != value))
			{
				this.OnNumberOfFishChanging(value);
				this.SendPropertyChanging();
				this._NumberOfFish = value;
				this.SendPropertyChanged("NumberOfFish");
				this.OnNumberOfFishChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankTemp", DbType="Float NOT NULL")]
	public double TankTemp
	{
		get
		{
			return this._TankTemp;
		}
		set
		{
			if ((this._TankTemp != value))
			{
				this.OnTankTempChanging(value);
				this.SendPropertyChanging();
				this._TankTemp = value;
				this.SendPropertyChanged("TankTemp");
				this.OnTankTempChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthOfFish", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string HealthOfFish
	{
		get
		{
			return this._HealthOfFish;
		}
		set
		{
			if ((this._HealthOfFish != value))
			{
				this.OnHealthOfFishChanging(value);
				this.SendPropertyChanging();
				this._HealthOfFish = value;
				this.SendPropertyChanged("HealthOfFish");
				this.OnHealthOfFishChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualityOfWater", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string QualityOfWater
	{
		get
		{
			return this._QualityOfWater;
		}
		set
		{
			if ((this._QualityOfWater != value))
			{
				this.OnQualityOfWaterChanging(value);
				this.SendPropertyChanging();
				this._QualityOfWater = value;
				this.SendPropertyChanged("QualityOfWater");
				this.OnQualityOfWaterChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDateOfWaterChange", DbType="DateTime NOT NULL")]
	public System.DateTime LastDateOfWaterChange
	{
		get
		{
			return this._LastDateOfWaterChange;
		}
		set
		{
			if ((this._LastDateOfWaterChange != value))
			{
				this.OnLastDateOfWaterChangeChanging(value);
				this.SendPropertyChanging();
				this._LastDateOfWaterChange = value;
				this.SendPropertyChanged("LastDateOfWaterChange");
				this.OnLastDateOfWaterChangeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBufferAdded", DbType="DateTime NOT NULL")]
	public System.DateTime DateBufferAdded
	{
		get
		{
			return this._DateBufferAdded;
		}
		set
		{
			if ((this._DateBufferAdded != value))
			{
				this.OnDateBufferAddedChanging(value);
				this.SendPropertyChanging();
				this._DateBufferAdded = value;
				this.SendPropertyChanged("DateBufferAdded");
				this.OnDateBufferAddedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountBufferAdded", DbType="Float NOT NULL")]
	public double AmountBufferAdded
	{
		get
		{
			return this._AmountBufferAdded;
		}
		set
		{
			if ((this._AmountBufferAdded != value))
			{
				this.OnAmountBufferAddedChanging(value);
				this.SendPropertyChanging();
				this._AmountBufferAdded = value;
				this.SendPropertyChanged("AmountBufferAdded");
				this.OnAmountBufferAddedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLastFed", DbType="DateTime NOT NULL")]
	public System.DateTime DateLastFed
	{
		get
		{
			return this._DateLastFed;
		}
		set
		{
			if ((this._DateLastFed != value))
			{
				this.OnDateLastFedChanging(value);
				this.SendPropertyChanging();
				this._DateLastFed = value;
				this.SendPropertyChanged("DateLastFed");
				this.OnDateLastFedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountFed", DbType="Float NOT NULL")]
	public double AmountFed
	{
		get
		{
			return this._AmountFed;
		}
		set
		{
			if ((this._AmountFed != value))
			{
				this.OnAmountFedChanging(value);
				this.SendPropertyChanging();
				this._AmountFed = value;
				this.SendPropertyChanged("AmountFed");
				this.OnAmountFedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AquaFarming")]
public partial class AquaFarming : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private System.DateTime _Date;
	
	private double _GreenHouseTemp;
	
	private double _GreenHouseHumidity;
	
	private string _PlantType;
	
	private double _AmountHarvested;
	
	private int _HarvestedBedNumber;
	
	private string _PlantHealth;
	
	private string _Notes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnGreenHouseTempChanging(double value);
    partial void OnGreenHouseTempChanged();
    partial void OnGreenHouseHumidityChanging(double value);
    partial void OnGreenHouseHumidityChanged();
    partial void OnPlantTypeChanging(string value);
    partial void OnPlantTypeChanged();
    partial void OnAmountHarvestedChanging(double value);
    partial void OnAmountHarvestedChanged();
    partial void OnHarvestedBedNumberChanging(int value);
    partial void OnHarvestedBedNumberChanged();
    partial void OnPlantHealthChanging(string value);
    partial void OnPlantHealthChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
	
	public AquaFarming()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreenHouseTemp", DbType="Float NOT NULL")]
	public double GreenHouseTemp
	{
		get
		{
			return this._GreenHouseTemp;
		}
		set
		{
			if ((this._GreenHouseTemp != value))
			{
				this.OnGreenHouseTempChanging(value);
				this.SendPropertyChanging();
				this._GreenHouseTemp = value;
				this.SendPropertyChanged("GreenHouseTemp");
				this.OnGreenHouseTempChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GreenHouseHumidity", DbType="Float NOT NULL")]
	public double GreenHouseHumidity
	{
		get
		{
			return this._GreenHouseHumidity;
		}
		set
		{
			if ((this._GreenHouseHumidity != value))
			{
				this.OnGreenHouseHumidityChanging(value);
				this.SendPropertyChanging();
				this._GreenHouseHumidity = value;
				this.SendPropertyChanged("GreenHouseHumidity");
				this.OnGreenHouseHumidityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PlantType
	{
		get
		{
			return this._PlantType;
		}
		set
		{
			if ((this._PlantType != value))
			{
				this.OnPlantTypeChanging(value);
				this.SendPropertyChanging();
				this._PlantType = value;
				this.SendPropertyChanged("PlantType");
				this.OnPlantTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountHarvested", DbType="Float NOT NULL")]
	public double AmountHarvested
	{
		get
		{
			return this._AmountHarvested;
		}
		set
		{
			if ((this._AmountHarvested != value))
			{
				this.OnAmountHarvestedChanging(value);
				this.SendPropertyChanging();
				this._AmountHarvested = value;
				this.SendPropertyChanged("AmountHarvested");
				this.OnAmountHarvestedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HarvestedBedNumber", DbType="Int NOT NULL")]
	public int HarvestedBedNumber
	{
		get
		{
			return this._HarvestedBedNumber;
		}
		set
		{
			if ((this._HarvestedBedNumber != value))
			{
				this.OnHarvestedBedNumberChanging(value);
				this.SendPropertyChanging();
				this._HarvestedBedNumber = value;
				this.SendPropertyChanged("HarvestedBedNumber");
				this.OnHarvestedBedNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlantHealth", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PlantHealth
	{
		get
		{
			return this._PlantHealth;
		}
		set
		{
			if ((this._PlantHealth != value))
			{
				this.OnPlantHealthChanging(value);
				this.SendPropertyChanging();
				this._PlantHealth = value;
				this.SendPropertyChanged("PlantHealth");
				this.OnPlantHealthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
	public string Notes
	{
		get
		{
			return this._Notes;
		}
		set
		{
			if ((this._Notes != value))
			{
				this.OnNotesChanging(value);
				this.SendPropertyChanging();
				this._Notes = value;
				this.SendPropertyChanged("Notes");
				this.OnNotesChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fishtank_DataPoint")]
public partial class Fishtank_DataPoint : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DataID;
	
	private string _TankID;
	
	private System.Nullable<double> _Ammonia_Concentration;
	
	private System.Nullable<double> _O2_Concentration;
	
	private System.Nullable<double> _Temp;
	
	private System.Nullable<double> _EC;
	
	private System.Nullable<double> _DO;
	
	private System.Nullable<double> _pH;
	
	private System.Nullable<double> _NH3_NH4;
	
	private System.Nullable<double> _NO2;
	
	private System.Nullable<double> _NO3;
	
	private System.Nullable<double> _FE;
	
	private System.Nullable<double> _P;
	
	private System.Nullable<double> _K;
	
	private System.Nullable<double> _CO;
	
	private System.Nullable<double> _MG;
	
	private System.Nullable<System.DateTime> _DataDate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataIDChanging(int value);
    partial void OnDataIDChanged();
    partial void OnTankIDChanging(string value);
    partial void OnTankIDChanged();
    partial void OnAmmonia_ConcentrationChanging(System.Nullable<double> value);
    partial void OnAmmonia_ConcentrationChanged();
    partial void OnO2_ConcentrationChanging(System.Nullable<double> value);
    partial void OnO2_ConcentrationChanged();
    partial void OnTempChanging(System.Nullable<double> value);
    partial void OnTempChanged();
    partial void OnECChanging(System.Nullable<double> value);
    partial void OnECChanged();
    partial void OnDOChanging(System.Nullable<double> value);
    partial void OnDOChanged();
    partial void OnpHChanging(System.Nullable<double> value);
    partial void OnpHChanged();
    partial void OnNH3_NH4Changing(System.Nullable<double> value);
    partial void OnNH3_NH4Changed();
    partial void OnNO2Changing(System.Nullable<double> value);
    partial void OnNO2Changed();
    partial void OnNO3Changing(System.Nullable<double> value);
    partial void OnNO3Changed();
    partial void OnFEChanging(System.Nullable<double> value);
    partial void OnFEChanged();
    partial void OnPChanging(System.Nullable<double> value);
    partial void OnPChanged();
    partial void OnKChanging(System.Nullable<double> value);
    partial void OnKChanged();
    partial void OnCOChanging(System.Nullable<double> value);
    partial void OnCOChanged();
    partial void OnMGChanging(System.Nullable<double> value);
    partial void OnMGChanged();
    partial void OnDataDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDataDateChanged();
    #endregion
	
	public Fishtank_DataPoint()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int DataID
	{
		get
		{
			return this._DataID;
		}
		set
		{
			if ((this._DataID != value))
			{
				this.OnDataIDChanging(value);
				this.SendPropertyChanging();
				this._DataID = value;
				this.SendPropertyChanged("DataID");
				this.OnDataIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TankID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string TankID
	{
		get
		{
			return this._TankID;
		}
		set
		{
			if ((this._TankID != value))
			{
				this.OnTankIDChanging(value);
				this.SendPropertyChanging();
				this._TankID = value;
				this.SendPropertyChanged("TankID");
				this.OnTankIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ammonia_Concentration", DbType="Float")]
	public System.Nullable<double> Ammonia_Concentration
	{
		get
		{
			return this._Ammonia_Concentration;
		}
		set
		{
			if ((this._Ammonia_Concentration != value))
			{
				this.OnAmmonia_ConcentrationChanging(value);
				this.SendPropertyChanging();
				this._Ammonia_Concentration = value;
				this.SendPropertyChanged("Ammonia_Concentration");
				this.OnAmmonia_ConcentrationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_O2_Concentration", DbType="Float")]
	public System.Nullable<double> O2_Concentration
	{
		get
		{
			return this._O2_Concentration;
		}
		set
		{
			if ((this._O2_Concentration != value))
			{
				this.OnO2_ConcentrationChanging(value);
				this.SendPropertyChanging();
				this._O2_Concentration = value;
				this.SendPropertyChanged("O2_Concentration");
				this.OnO2_ConcentrationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Temp", DbType="Float")]
	public System.Nullable<double> Temp
	{
		get
		{
			return this._Temp;
		}
		set
		{
			if ((this._Temp != value))
			{
				this.OnTempChanging(value);
				this.SendPropertyChanging();
				this._Temp = value;
				this.SendPropertyChanged("Temp");
				this.OnTempChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EC", DbType="Float")]
	public System.Nullable<double> EC
	{
		get
		{
			return this._EC;
		}
		set
		{
			if ((this._EC != value))
			{
				this.OnECChanging(value);
				this.SendPropertyChanging();
				this._EC = value;
				this.SendPropertyChanged("EC");
				this.OnECChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DO", DbType="Float")]
	public System.Nullable<double> DO
	{
		get
		{
			return this._DO;
		}
		set
		{
			if ((this._DO != value))
			{
				this.OnDOChanging(value);
				this.SendPropertyChanging();
				this._DO = value;
				this.SendPropertyChanged("DO");
				this.OnDOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pH", DbType="Float")]
	public System.Nullable<double> pH
	{
		get
		{
			return this._pH;
		}
		set
		{
			if ((this._pH != value))
			{
				this.OnpHChanging(value);
				this.SendPropertyChanging();
				this._pH = value;
				this.SendPropertyChanged("pH");
				this.OnpHChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NH3_NH4", DbType="Float")]
	public System.Nullable<double> NH3_NH4
	{
		get
		{
			return this._NH3_NH4;
		}
		set
		{
			if ((this._NH3_NH4 != value))
			{
				this.OnNH3_NH4Changing(value);
				this.SendPropertyChanging();
				this._NH3_NH4 = value;
				this.SendPropertyChanged("NH3_NH4");
				this.OnNH3_NH4Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NO2", DbType="Float")]
	public System.Nullable<double> NO2
	{
		get
		{
			return this._NO2;
		}
		set
		{
			if ((this._NO2 != value))
			{
				this.OnNO2Changing(value);
				this.SendPropertyChanging();
				this._NO2 = value;
				this.SendPropertyChanged("NO2");
				this.OnNO2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NO3", DbType="Float")]
	public System.Nullable<double> NO3
	{
		get
		{
			return this._NO3;
		}
		set
		{
			if ((this._NO3 != value))
			{
				this.OnNO3Changing(value);
				this.SendPropertyChanging();
				this._NO3 = value;
				this.SendPropertyChanged("NO3");
				this.OnNO3Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FE", DbType="Float")]
	public System.Nullable<double> FE
	{
		get
		{
			return this._FE;
		}
		set
		{
			if ((this._FE != value))
			{
				this.OnFEChanging(value);
				this.SendPropertyChanging();
				this._FE = value;
				this.SendPropertyChanged("FE");
				this.OnFEChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P", DbType="Float")]
	public System.Nullable<double> P
	{
		get
		{
			return this._P;
		}
		set
		{
			if ((this._P != value))
			{
				this.OnPChanging(value);
				this.SendPropertyChanging();
				this._P = value;
				this.SendPropertyChanged("P");
				this.OnPChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_K", DbType="Float")]
	public System.Nullable<double> K
	{
		get
		{
			return this._K;
		}
		set
		{
			if ((this._K != value))
			{
				this.OnKChanging(value);
				this.SendPropertyChanging();
				this._K = value;
				this.SendPropertyChanged("K");
				this.OnKChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CO", DbType="Float")]
	public System.Nullable<double> CO
	{
		get
		{
			return this._CO;
		}
		set
		{
			if ((this._CO != value))
			{
				this.OnCOChanging(value);
				this.SendPropertyChanging();
				this._CO = value;
				this.SendPropertyChanged("CO");
				this.OnCOChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MG", DbType="Float")]
	public System.Nullable<double> MG
	{
		get
		{
			return this._MG;
		}
		set
		{
			if ((this._MG != value))
			{
				this.OnMGChanging(value);
				this.SendPropertyChanging();
				this._MG = value;
				this.SendPropertyChanged("MG");
				this.OnMGChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataDate", DbType="Date")]
	public System.Nullable<System.DateTime> DataDate
	{
		get
		{
			return this._DataDate;
		}
		set
		{
			if ((this._DataDate != value))
			{
				this.OnDataDateChanging(value);
				this.SendPropertyChanging();
				this._DataDate = value;
				this.SendPropertyChanged("DataDate");
				this.OnDataDateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
